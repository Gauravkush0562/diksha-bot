import { createBot, createProvider, createFlow, addKeyword, MemoryDB } from '@builderbot/bot'
import { BaileysProvider } from '@builderbot/provider-baileys'
import productsData from './products.json' // Make sure path is correct

const START_CHAT_IMAGE = 'https://i.postimg.cc/t7K1KvGB/startchat.png'
const categoryImages: Record<string, string> = {
  'Construction Material': 'https://i.postimg.cc/rz00YX3d/construction-material.jpg',
  '‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£ ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä': 'https://i.postimg.cc/rz00YX3d/construction-material.jpg'
}

const ADMIN_NUMBER = '918218939069@s.whatsapp.net' // Your WhatsApp ID

const adapterDB = new MemoryDB()

// --- Step 1: Start Chat ---
const startChatFlow = addKeyword<BaileysProvider, MemoryDB>(['*'])
  .addAction(async (ctx, { flowDynamic, state }) => {
    const sessionStarted = await state.get('sessionStarted')
    if (!sessionStarted) {
      await flowDynamic([{
        body: 'üëã Welcome to Diksha Steel & Building Materials!\n\n‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§¶‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§∏‡•ç‡§ü‡•Ä‡§≤ ‡§è‡§Ç‡§° ‡§¨‡§ø‡§≤‡•ç‡§°‡§ø‡§Ç‡§ó ‡§Æ‡§ü‡•á‡§∞‡§ø‡§Ø‡§≤ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§',
        media: START_CHAT_IMAGE,
        buttons: ['Start Chat']
      }])
    }
  })

// --- Step 2: Language Selection ---
const languageFlow = addKeyword<BaileysProvider, MemoryDB>(['Start Chat'])
  .addAction(async (ctx, { flowDynamic }) => {
    await flowDynamic([{
      body: 'Please select your preferred language / ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç',
      buttons: ['English / ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡§º‡•Ä', 'Hindi / ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä']
    }])
  })

// --- Step 3: Capture Language and Show Category ---
const captureLanguageFlow = addKeyword<BaileysProvider, MemoryDB>(['English / ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡§º‡•Ä', 'Hindi / ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä'])
  .addAction(async (ctx, { flowDynamic, state }) => {
    const language = ctx.body
    await state.update({ sessionStarted: true, language })

    const categoryButtons = language.startsWith('English')
      ? ['Construction Material']
      : ['‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£ ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä']

    await flowDynamic([{
      body: language.startsWith('English') ? 'What are you interested in? ü§î' : '‡§Ü‡§™ ‡§ï‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§∞‡•Å‡§ö‡§ø ‡§∞‡§ñ‡§§‡•á ‡§π‡•à‡§Ç? ü§î',
      media: categoryImages[categoryButtons[0]],
      buttons: categoryButtons
    }])
  })

// --- Step 4: Product Selection ---
const productFlow = addKeyword<BaileysProvider, MemoryDB>(
  productsData.construction_material.flatMap(p => [p.name_en, p.name_hi])
)
.addAction(async (ctx, { flowDynamic, state }) => {
  const { language } = await state.get()
  const product = productsData.construction_material.find(p =>
    p.name_en === ctx.body || p.name_hi === ctx.body
  )

  if (product) {
    await state.update({ lastSelectedProduct: ctx.body })
    await flowDynamic([{
      body: language.startsWith('English')
        ? `You selected ${product.name_en}. Choose an option below:`
        : `‡§Ü‡§™‡§®‡•á ${product.name_hi} ‡§ö‡•Å‡§®‡§æ ‡§π‡•à‡•§ ‡§®‡•Ä‡§ö‡•á ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§ö‡•Å‡§®‡•á‡§Ç:`,
      media: product.image,
      buttons: [
        'Get Latest Price',
        'Request Quote / ‡§ï‡•ã‡§ü‡•á‡§∂‡§® ‡§Æ‡§æ‡§Ç‡§ó‡•á‡§Ç',
        'Delivery Info / ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä',
        'Product Details / ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§µ‡§ø‡§µ‡§∞‡§£',
        'Back to Categories / ‡§™‡§ø‡§õ‡§≤‡•Ä ‡§∏‡•Ç‡§ö‡•Ä'
      ]
    }])
  }
})

// --- Step 5a: Request Price (manual approval) ---
const requestPriceFlow = addKeyword<BaileysProvider, MemoryDB>(['Get Latest Price'])
.addAction(async (ctx, { flowDynamic, state, provider }) => {
  const { lastSelectedProduct, language } = await state.get()
  await flowDynamic([{
    body: language.startsWith('English')
      ? `Your request for the latest price has been sent. Please wait for approval.`
      : `‡§Ü‡§™‡§ï‡•Ä ‡§®‡§µ‡•Ä‡§®‡§§‡§Æ ‡§ï‡•Ä‡§Æ‡§§ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§≠‡•á‡§ú ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§®‡•Å‡§Æ‡•ã‡§¶‡§® ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç‡•§`
  }])

  // Notify admin
  await provider.sendMessage(ADMIN_NUMBER, {
    text: `‚ö†Ô∏è ALERT: User ${ctx.from} requested price for ${lastSelectedProduct}. Reply with /price ${ctx.from} <product> <approved_price> to approve.`
  })
})

// --- Step 5b: Admin sends approved price ---
addKeyword(['/price'], { capture: true })
  .addAction(async (ctx, { provider }) => {
    const parts = ctx.body.split(' ')
    const userId = parts[1]
    const productName = parts[2]
    const approvedPrice = parts.slice(3).join(' ')

    await provider.sendMessage(userId, {
      text: `üí∞ Approved price for ${productName}: ${approvedPrice}`
    })

    await provider.sendMessage(ADMIN_NUMBER, {
      text: `‚úÖ Price sent to ${userId} for ${productName}: ${approvedPrice}`
    })
  })

// --- Step 5c: Request Quote ---
const quoteFlow = addKeyword<BaileysProvider, MemoryDB>(['Request Quote / ‡§ï‡•ã‡§ü‡•á‡§∂‡§® ‡§Æ‡§æ‡§Ç‡§ó‡•á‡§Ç'])
.addAnswer('Please enter the quantity / ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç:', { capture: true }, async (ctx, { state, flowDynamic, provider }) => {
  const { lastSelectedProduct, language } = await state.get()
  await flowDynamic([{
    body: language.startsWith('English')
      ? `‚úÖ Quote request received for ${ctx.body} units of ${lastSelectedProduct}`
      : `‚úÖ ${lastSelectedProduct} ‡§ï‡•á ${ctx.body} ‡§Ø‡•Ç‡§®‡§ø‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§ü‡•á‡§∂‡§® ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§π‡•Å‡§Ü`
  }])

  await provider.sendMessage(ADMIN_NUMBER, {
    text: `‚ö†Ô∏è ALERT: User ${ctx.from} requested a quote for ${lastSelectedProduct}, Quantity: ${ctx.body}`
  })
})

// --- Step 5d: Delivery Info ---
const deliveryFlow = addKeyword<BaileysProvider, MemoryDB>(['Delivery Info / ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä'])
.addAnswer('Please enter your delivery location / ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç:', { capture: true }, async (ctx, { state, flowDynamic, provider }) => {
  const { lastSelectedProduct, language } = await state.get()
  await flowDynamic([{
    body: language.startsWith('English')
      ? `‚úÖ Delivery info received for ${lastSelectedProduct}. We will contact you soon.`
      : `‚úÖ ${lastSelectedProduct} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§π‡•Å‡§à‡•§ ‡§π‡§Æ ‡§ú‡§≤‡•ç‡§¶ ‡§π‡•Ä ‡§Ü‡§™‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§`
  }])

  await provider.sendMessage(ADMIN_NUMBER, {
    text: `‚ö†Ô∏è ALERT: User ${ctx.from} entered delivery info for ${lastSelectedProduct}: ${ctx.body}`
  })
})

// --- Step 5e: Product Details ---
const detailsFlow = addKeyword<BaileysProvider, MemoryDB>(['Product Details / ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§µ‡§ø‡§µ‡§∞‡§£'])
  .addAction(async (ctx, { flowDynamic, state }) => {
    const { lastSelectedProduct, language } = await state.get()
    const product = productsData.construction_material.find(p =>
      p.name_en === lastSelectedProduct || p.name_hi === lastSelectedProduct
    )

    if (product) {
      await flowDynamic([{
        body: language.startsWith('English')
          ? `üìÑ Details for ${product.name_en}:\n- Price: ${product.price}\n- Promotion: ${product.promotion}`
          : `üìÑ ${product.name_hi} ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£:\n- ‡§ï‡•Ä‡§Æ‡§§: ${product.price}\n- ‡§™‡•ç‡§∞‡§ö‡§æ‡§∞: ${product.promotion}`,
        media: product.image,
        buttons: ['Get Latest Price', 'Request Quote / ‡§ï‡•ã‡§ü‡•á‡§∂‡§® ‡§Æ‡§æ‡§Ç‡§ó‡•á‡§Ç', 'Delivery Info / ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä', 'Back to Categories / ‡§™‡§ø‡§õ‡§≤‡•Ä ‡§∏‡•Ç‡§ö‡•Ä']
      }])
    }
  })

// --- Step 6: Back to Categories ---
addKeyword(['Back to Categories / ‡§™‡§ø‡§õ‡§≤‡•Ä ‡§∏‡•Ç‡§ö‡•Ä'])
  .addAction(async (ctx, { flowDynamic, state }) => {
    const { language } = await state.get()
    const categoryButtons = language.startsWith('English') ? ['Construction Material'] : ['‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£ ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä']
    await flowDynamic([{
      body: language.startsWith('English') ? 'Please select a category:' : '‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç:',
      buttons: categoryButtons
    }])
  })

// --- Step 7: FAQ ---
const faqFlow = addKeyword(['FAQ', '‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§®'])
  .addAction(async (ctx, { flowDynamic, state }) => {
    const { language } = await state.get()
    const faqButtons = language.startsWith('English')
      ? ['Payment Options', 'Delivery Time', 'Stock Availability']
      : ['‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™', '‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§∏‡§Æ‡§Ø', '‡§∏‡•ç‡§ü‡•â‡§ï ‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡§§‡§æ']

    await flowDynamic([{
      body: language.startsWith('English') ? 'Please select a question:' : '‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ö‡•Å‡§®‡•á‡§Ç:',
      buttons: faqButtons
    }])
  })

addKeyword(['Payment Options', '‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™'])
  .addAnswer('We accept cash, UPI, and bank transfer / ‡§π‡§Æ ‡§®‡§ï‡§¶, ‡§Ø‡•Ç‡§™‡•Ä‡§Ü‡§à ‡§î‡§∞ ‡§¨‡•à‡§Ç‡§ï ‡§ü‡•ç‡§∞‡§æ‡§Ç‡§∏‡§´‡§∞ ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§')
addKeyword(['Delivery Time', '‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§∏‡§Æ‡§Ø'])
  .addAnswer('Delivery takes 2-5 days depending on your location / ‡§Ü‡§™‡§ï‡•á ‡§∏‡•ç‡§•‡§æ‡§® ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§Æ‡•á‡§Ç 2-5 ‡§¶‡§ø‡§® ‡§≤‡§ó‡§§‡•á ‡§π‡•à‡§Ç‡•§')
addKeyword(['Stock Availability', '‡§∏‡•ç‡§ü‡•â‡§ï ‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡§§‡§æ'])
  .addAnswer('All items are available in stock / ‡§∏‡§≠‡•Ä ‡§µ‡§∏‡•ç‡§§‡•Å‡§è‡§Å ‡§∏‡•ç‡§ü‡•â‡§ï ‡§Æ‡•á‡§Ç ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§π‡•à‡§Ç‡•§')

// --- Create bot ---
const main = async () => {
  const adapterFlow = createFlow([
    startChatFlow,
    languageFlow,
    captureLanguageFlow,
    productFlow,
    requestPriceFlow,
    quoteFlow,
    deliveryFlow,
    detailsFlow,
    faqFlow
  ])

  const adapterProvider = createProvider(BaileysProvider)
  adapterProvider.initHttpServer(3000)

  await createBot({
    flow: adapterFlow,
    provider: adapterProvider,
    database: adapterDB,
  })
}

main()
